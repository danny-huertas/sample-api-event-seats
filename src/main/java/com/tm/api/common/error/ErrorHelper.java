package com.tm.api.common.error;

import com.tm.api.common.api.Error;
import com.tm.api.common.api.Operation;
import com.tm.api.common.api.OperationError;
import com.tm.api.common.api.Result;
import com.tm.api.common.localization.MessageHandler;
import org.apache.commons.lang3.Validate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Component
public class ErrorHelper {

    private static final String ERROR_SPLITTER = "-";

    private MessageHandler messageHandler;

    @Autowired
    public ErrorHelper(MessageHandler messageHandler) {
        this.messageHandler = messageHandler;
    }

    /**
     * This method is used to set the Array of errors and is used specifically
     * for Body Validations only.
     *
     * @param errors List of errors that were detected during api. The
     *         format of these errors is {code}-{field}-{message}
     * @param traceId traceId of the request
     * @return Error bean to be converted to error response
     */
    public OperationError errorResponse(List<String> errors, String traceId) {
        final ArrayList<Error> errorBeanList = new ArrayList<>();

        //validate all the properties in the cardHolderDto object
        errors.forEach(error -> {
            final String[] errorSplit = error.split(ERROR_SPLITTER);
            // This is to avoid the default exception generated by
            // validation constraints.
            Validate.isTrue(errorSplit.length > 0,
                    messageHandler.localizeMessage(ErrorConstants.ERROR_FORMAT_NOT_SUPPORTED) + error);
            String code = errorSplit[0];
            String field = errorSplit[1];
            String message = messageHandler.localizeMessage(code);

            Error errorBean = new Error.ApiErrorBuilder().errorCode(code).errorMessage(message).moreInfo(field).build();
            errorBeanList.add(errorBean);
        });

        return new OperationError(
                new Operation.ApiOperationBuilder().result(Result.ERROR).correlationId(traceId).errors(errorBeanList)
                        .requestInstant(null).build());
    }

    /**
     * This method is used to set the OperationsErrorBean with the single Error.
     *
     * @param errorCode Code of error that was detected
     * @param traceId traceId of the request
     * @param errorMessage Error message
     * @param moreInfo Error field
     * @param startTime Start time of the api
     * @return Error bean to be converted to error response. If null then start
     *         time is set to empty string.
     */
    public OperationError errorResponse(final String errorCode, final String traceId, final String errorMessage,
            final String moreInfo, final Object startTime) {

        final Error errorBean = new Error.ApiErrorBuilder().errorCode(errorCode).errorMessage(errorMessage)
                .moreInfo(moreInfo).build();

        return new OperationError(new Operation.ApiOperationBuilder().result(Result.ERROR).correlationId(traceId)
                .errors(Collections.singletonList(errorBean)).requestInstant(startTime).build());
    }
}
